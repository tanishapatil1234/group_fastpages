{
  
    
        "post0": {
            "title": "1.1 Collaboration Notes",
            "content": "Think Pair Share : . Team Collab . Notes on Collaboration . Computing innovation: integrates the use of a program in order to function | Collaboration is necessary in order to avoid bias, and have new perspectives in development. This is clearly shown in the differences between Super Mario Bro 2 and 3 | Collaboration teaches skills like: communication, negotiation, conflict resolution, consensus building | Pair programming: is when two people work as a pair on a program together. One types code while other observes and looks for errors | Think Pair Share: is when you think on your own, think with a partner, and then share with a larger group | You can collaborate using repl, github, shared doc, comments in code | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/20/1.1Collaboration_Notes.html",
            "relUrl": "/2022/09/20/1.1Collaboration_Notes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Ideas for Performance Task",
            "content": "Ideas for Performance Task: . Languages Translator: user selects language, take user input, checks it against a previously stored dictionary, outputs appropriate translation | Pixel Art : user input of characteristics: color/brush size/location , output pixel displayed wit correct characteristics | Graphing Calculator: user input of equation, output of graph | Citation Machine: user input of type of citation, source name/author/etc , output of complete citation | . Rubric/Expectations . Row 1: Program Purpose and Function . Assesses students’ ability to explain how a code segment or program functions. (Skill: Code Analysis) For 3a, make sure to differentiate between program purpose and function They are defined in the scoring guidelines . Row 2: Data Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - data) . Row 3: Managing Complexity . Assesses students’ ability to explain how abstraction manages complexity. (Skill Abstraction in Program Development explain complexity) Be specific about how the program manages complexity in the context of your own program . Row 4: Procedural Abstraction . Assesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - procedures/functions) Must be a student-developed procedure . Row 5: Algorithm Implementation . Assesses students’ ability to implement and apply an algorithm. (Skill Algorithms and Program Development) ## Row 6: Testing Assesses students’ ability to investigate the situation, context,or task. (Skill Computational Solution Design - testing) .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/12/performancetask-ideas.html",
            "relUrl": "/2022/09/12/performancetask-ideas.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Creative Development Blog",
            "content": "Creative Development Blog . AppLab Creations . AppLab Creation | Personality Quiz . | Program Purpose This purpose of this program is to test the user’s ability to recognize popular luxury brand logos. | Program Functionality This program consists of three questions in order to quiz the user on their ability to recognize logos. It starts at the home page and navigates through each question page. If the answer selected is wrong, the program leads the user to an ‘incorrect’ question that allows the user to either retry the question or get a hint. The last screen desplays the results of the quiz. | Program Testing I tested this program multiple times. At first I did not use hints and realized that for someone without knowledge of brands, not having hints or retries could be discouraging. Also, the score calculator was not displaying because the if statement was not under an ‘on event statement’. After changing this and reassigning score values to each answer I got better results. App Planning - Logos Quiz . | Home page (introduces quiz, leads to q1) | Q1: question with four options A B C D. If correct answer isn’t chosen, lead user to ‘incorrect’ page. Incorrect page displays that the user input was incorrect and has option to return to the question or recieve a hint. When correct answer choice is clicked, leads to ‘correct’ page which leads to question 2. | Q2: choose between four image options using check box. If correct answer isn’t checked, lead user to ‘incorrect’ page. Incorrect page displays that the user input was incorrect and has option to return to the question or recieve a hint. When correct answer choice is clicked, leads to ‘correct’ page which leads to question 2. | Q3: choose between two images. If incorrect, lead to incorrect page and option to return to question | . Additions . Successes: use of correct/incorrect pages, check boxs | Failures: tried to use a for loop but wasn’t able to because when looped the incorrect answers had to go to different pages based on the question that was incorrect, drop down failed because dropdown only changed the screen and did not give an output | Adjustments: could not use the dropdown so I used the checkbozes instead. Loops did not work due to the fact that each user input needed specific screen changes. So I did not use loops. Ideally I would have figured out the loops because the code was very long. | . Extra . created a second quiz inspired by buzzfeed quix | created a series of questions that determine whether you are an introvert or extrovert | I created a variable ‘score’ and for whichever answer I added/subtracted it a specific value to be added to var score. | In the end I used an if/else statement and said that if score was greater than 0, to display the score and ‘introvert’ | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/11/creativedevelopmentblog.html",
            "relUrl": "/2022/09/11/creativedevelopmentblog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Remote Theme Change",
            "content": "Remote Theme Change Observations . I temporarily changed the theme to the ‘modernist’ theme . Front Page . . no pages | title is not a link back to the home page | enlarged post pictures | website shrunken horizontally against dark bakground | new font Post . . | emojis are not displayed | headings are not properly placed | indents are not properly placed Jupyter Notebook . . | new font within code cells and md cells | title is not a link back to the home page | tags displayed as a link | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/week2/2022/09/05/changetheme-blog.html",
            "relUrl": "/markdown/week2/2022/09/05/changetheme-blog.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Info Data Base",
            "content": "InfoDb is a database that has information about students&#39; grades, their names, and student id numbers within it. The final goal is to get an input from the user of the student ID, find it in the dictionary, and print the correct student&#39;s information. . InfoDb = [] # Append to List a Dictionary of key/values related student and grades InfoDb.append({ &quot;Name&quot;: [&quot;Sofia Kemuel&quot;], &quot;Student ID&quot;: [&quot;1029&quot;], &quot;Math&quot;: [&quot;88% B+&quot;], &quot;English&quot;: [&quot;93% A-&quot;], &quot;History&quot;: [&quot;95% A&quot;], &quot;Art&quot;: [&quot;98% A+&quot;], &quot;Physical Education&quot;: [&quot;89% B+&quot;], }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;Name&quot;: [&quot;Jennifer Darcey&quot;], &quot;Student ID&quot;: [&quot;2837&quot;], &quot;Math&quot;: [&quot;77% C+&quot;], &quot;English&quot;: [&quot;90% A-&quot;], &quot;History&quot;: [&quot;91% A-&quot;], &quot;Art&quot;: [&quot;100% A+&quot;], &quot;Physical Education&quot;: [&quot;82% B-&quot;], }) # Print the data structure print(InfoDb) print() . [{&#39;Name&#39;: [&#39;Sofia Kemuel&#39;], &#39;Student ID&#39;: [&#39;1029&#39;], &#39;Math&#39;: [&#39;88% B+&#39;], &#39;English&#39;: [&#39;93% A-&#39;], &#39;History&#39;: [&#39;95% A&#39;], &#39;Art&#39;: [&#39;98% A+&#39;], &#39;Physical Education&#39;: [&#39;89% B+&#39;]}, {&#39;Name&#39;: [&#39;Jennifer Darcey&#39;], &#39;Student ID&#39;: [&#39;2837&#39;], &#39;Math&#39;: [&#39;77% C+&#39;], &#39;English&#39;: [&#39;90% A-&#39;], &#39;History&#39;: [&#39;91% A-&#39;], &#39;Art&#39;: [&#39;100% A+&#39;], &#39;Physical Education&#39;: [&#39;82% B-&#39;]}] . As you can see, the code cell above has just saved the information of students Sofia and Jennifer within the dictionaries. . def print_data(db): print(db[&quot;Name&quot;]) print(&quot; t&quot;, &quot;Student ID:&quot;, db[&quot;Student ID&quot;]) print(&quot; t&quot;, &quot;Math:&quot;, db[&quot;Math&quot;]) print(&quot; t&quot;, &quot;English:&quot;, db[&quot;English&quot;]) print(&quot; t&quot;, &quot;History:&quot;, db[&quot;History&quot;]) print(&quot; t&quot;, &quot;Art:&quot;, db[&quot;Art&quot;]) print(&quot; t&quot;, &quot;Physical Education:&quot;, db[&quot;Physical Education&quot;]) print() # define function for_loop to print dictionaries def for_loop(): for record in InfoDb: print_data(record) for_loop() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . Using a for loop, the code cell above finds the record within InfoDb and prints student information one by one for all students (2). . def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . The code cell above executes a code using a while loop to print the contents of the dictionary. It loops comparing a value i to the length of the dictionary. . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] [&#39;Jennifer Darcey&#39;] Student ID: [&#39;2837&#39;] Math: [&#39;77% C+&#39;] English: [&#39;90% A-&#39;] History: [&#39;91% A-&#39;] Art: [&#39;100% A+&#39;] Physical Education: [&#39;82% B-&#39;] . The code cell above prints the contents of the infodb dictionary using a recursive function (meaning the function itself is called within the loop) . input_id = input(&quot;Enter student ID: &quot;) # define function to find in InfoDb and print information corrsponding to certain ID def loop_with_input(): for record in InfoDb: if search(record, input_id): print_data(record) loop_with_input() . [&#39;Sofia Kemuel&#39;] Student ID: [&#39;1029&#39;] Math: [&#39;88% B+&#39;] English: [&#39;93% A-&#39;] History: [&#39;95% A&#39;] Art: [&#39;98% A+&#39;] Physical Education: [&#39;89% B+&#39;] . The code cell above takes the input from the user and assigns it to the variable &quot;input_id&quot;. It uses a for loop and &#39;record&#39; in InfoDb to loop betweeen all the student&#39;s data one by one. It checks whether input_id is in each student&#39;s data. If it is, it prints the student data. .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/09/03/infodb.html",
            "relUrl": "/2022/09/03/infodb.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Panel Notes",
            "content": "CS Alumini Notes and Takeaways . How did you realize you wanted to do your major through apcsp/csa? . used coding knowledge and applied it to other fields | taking these classes certified their previous interest in cs | take time to reflect on how u want to apply comp sci in your life | Doing internships can solidify your interest | Even if you don’t want to go into computer science, it can help with other fields | csa made people realize that you can apply cs skills in real life | . Biggest challenge in doing Cs? . perseveration and determination | having an open mind and using resources like google | focus on your own path and journey | Don’t take shortcuts, try to learn and go above and beyond | Willing to just jump into CS . project based classes will help | . PBL scenario is in college cs classes . not a lot of project based learning in college | Self initiate projects | Good to learn how to self study and group study | . How have you applied CS in your major if you’re not majoring in CS? . Can help you in all of your projects | All fields have applications of CS | MatLab CAD softwares 3D printing etc | many applications of CS | CS can help with high level math courses especially python | can use jupyter notebooks for technical papers and interactive graphs | . Have you had a job with school or your professor . put together a resume, linkedin | talk to your teachers | Stand out to your teachers | internships:northrop grumman, LG software intern, arts graphic design web design, smaller companies in SD | make sure you network, reach out | robotics | job: code ninjas *Do personal projects *ucsd triton ai | . Main Takeaways: . No matter what STEM field you enter, CS basic logic and being familiar with syntax will be very helpful | Go above and beyond, try to research CS deeper than what is presented in class and do personal projects | Network and communicate with businesses. After taking CS, you can apply it to internships and jobs. | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/29/panel_notes.html",
            "relUrl": "/2022/08/29/panel_notes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Basic Python Vocabulary",
            "content": "Vocab List . print: used to print a message on the screen. The message can be a string, integer, list, and more ex: print(“Hello!”) outpyt: Hello! . | input: used to take an input from the user. Input taken from the user will be converted into a string ex: input(“Enter value: “) Enter value: 100 ‘100’ . | .append: used to add elements to the end of a list ex: fruits_list = [‘apple’, ‘banana’, ‘plum’] fruits_list.append(‘peach’) print(fruits_list) [‘apple’, ‘banana’, ‘plum’, ‘peach’] . | if statement: evaluates whether a condition is true or false. runs code based on that. ex: if 5 &gt; 2: print(“yellow”) Since 5 &gt; 2 = true, ‘yellow’ will be printed . |",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/27/pythonvocab.html",
            "relUrl": "/2022/08/27/pythonvocab.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Bash Check",
            "content": "%%bash #Check version of Java java_version=$(java -version 2&gt;&amp;1 | sed -n &#39;;s/.* version &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $java_version &gt; &quot;0&quot; ]; then echo &quot;Java version: &quot;$java_version else echo &quot;Java not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . Java version: 110 Python version: 3.9.12 .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/27/bash_install_check.html",
            "relUrl": "/2022/08/27/bash_install_check.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "My Python Quiz",
            "content": "score = 0 username = input(&#39;Enter your name:&#39;) print(&#39;Hello, &#39; + username) ready = input(&quot;This quiz will test your knowledge of python vocabulary. It is four questions long. Are you ready to take the test? Answer yes or no&quot;) if ready == &#39;yes&#39;: print(&quot;Great, let&#39;s get started&quot;) else: print(&quot;Don&#39;t worry, you&#39;ll do great&quot;) #question 1: answer_1 = input(&quot;Question 1: What is a statement containing if or if/else called?&quot;) if answer_1 == &#39;conditional&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 2: answer_2 = input(&quot;Question 2: Fill in the blank: ___ is a datatype with only two possible values; true or false&quot;) if answer_2 == &#39;boolean&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 3: answer_3 = input(&quot;Question 3: What should you write before a function to DEFine it&quot;) if answer_3 == &#39;def&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #question 4: answer_4 = input(&quot;Question 4: What can you use to store values?&quot;) if answer_4 == &#39;variable&#39;: print(&quot;Correct! Time for the next question&quot;) score = score + 1 else: print(&quot;No! That is incorrect&quot;) #end if score &gt;= 3: print(&quot;Congrats! You finished the quiz and did so well! Your score is: {}/4&quot; .format(score)) else: print(&quot;Congrats! You finished the quiz. Your score is: {}/4. Better luck next time&quot; .format(score)) . Hello, Tanisha Great, let&#39;s get started No! That is incorrect Correct! Time for the next question Correct! Time for the next question No! That is incorrect Congrats! You finished the quiz. Your score is: 2/4. Better luck next time .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/26/pyquiz.html",
            "relUrl": "/2022/08/26/pyquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Tanisha's Daily Blog",
            "content": "Thursday, August 25th . Period 1 Intro to Engineering Design: . :clock1: Starts @ 8:35 am | :pencil2: Warm Up/Notes : class discussion about brainstorming and concept sketches | :bulb: Main Idea : Brainstorming can be a lenghty and diffucult process. It’s important to be patient and not discard any ideas you have. | :memo: HW : finish concept sketch and brainstorming 20 ideas for game Period 2 AP Chemistry: | :clock1: Starts @ 9:49 am | :pencil2: Warm Up/Notes : Mass Spectroscopy notes | :bulb: Main Idea : the four processes that occur inside a mass spectrometer are ionization, acceleration, deflection, and detection | :memo: HW : finish extension questions, print out and fill out lab storyboard Period 3 AP Calculus AB: | :clock1: Starts @ 11:13 am | :pencil2: Warm Up/Notes : a-g , getting more comfortable with algebraic limits | :bulb: Main Idea : if f(x) is continous at x=a then lim of f(x) as x approaches a = f(a) | :memo: HW : finish notes a-g, p 103-104 # 15, 40, 42, 49 and p 115 # 24, 26 (optional), 28, 30, 32, 37, 38, 41, 43, 54 Lunch Break Period 4 APCSP: | :clock1: Starts @ 12:47 pm | :pencil2: Warm Up/Notes : Learned about bash and worked on project due monday | :bulb: Main Idea : bash scripting is a way to automate tasks (collection of bash commands) that you need to execute at a specific time | :memo: HW : Work on bash, pyquiz, and blog/vocab md post Period 5 Honors Humanities: | :clock1: Starts @ 2:36 pm | :pencil2: Warm Up/Notes : analyze art, read tolstoy’s definition of art | :bulb: Main Idea : The definition of art has changed throughout the centuries. Art must convey an emotion. feeling, or idea | :memo: HW : finish cornell notes on “Culture and Values”, prepare for class discussion and presentation on POE and D Field Hockey Practice: :runner: Practice from 4-6 pm | .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/26/dailyblog.html",
            "relUrl": "/2022/08/26/dailyblog.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;Hello, Welcome to my Jupyter Notebook&quot;) . Hello, Welcome to my Jupyter Notebook .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/2022/08/21/python-1.html",
            "relUrl": "/2022/08/21/python-1.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Tanisha's First Markdown Post",
            "content": "Tanisha’s First Markdown Post . This is my markdown post :+1: . :memo: Note: This is my first time making a markdown post. . Table . This is . a | table | . List . Tanisha’s Favorite Foods: . Pizza 🍕 . | Pasta 🥘 . | Ice Cream 🍨 . | Cupcakes 🧁 . | . Image . The Rocky Mountains are beautiful! I want to go here some day.:blush: .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2022/08/21/first-blog-post.html",
            "relUrl": "/markdown/2022/08/21/first-blog-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tanishapatil1234.github.io/test-fastpage-tp/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Time Box",
          "content": "Week # Title Link to Review Ticket Learning . Week #0 | Tools Setup | Review Ticket 0 | Created personal fastpage, made first markdown post, learned to use vscode, and used jupyter notebook to run python | . Week #1 | Intro Python, Jupyter, Fastpages | Review Ticket 1 | Created a quiz with python, added images to personalize front page, md daily blog post, bash tool check | . Week #2 | Data Abstraction | Review Ticket 2 | Change remote theme temporarily and blog findings, created this page and table, use python find and print certain part of database based on user input (dictionaries) | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/Time%20Box/",
          "relUrl": "/Time Box/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tanishapatil1234.github.io/test-fastpage-tp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}